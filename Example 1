/*


    Introduction:

    Each of the following SQL problems can be solved using a single statement.
	
    However, the most important part of your answer is returning the desired
    output. In other words, a correct answer that uses multiple statements is
	more desired than an incorrect answer that uses a single statement.
 
    The results must work when run against a SQL Server 2012 Standard Edition
    instance.
*/


/*
    Exercise #1

    Request:
    Delete the duplicate records.

    Validation:
    The desired output of "SELECT * FROM [#dupes]" is the result set below.

    ID                  Name
    ------------------- --------------------
    1                   George
    2                   Paul
    4                   John
    7                   Ringo
*/

/* Setup Exercise Data */

--DROP TABLE #dupes

CREATE TABLE [#dupes]
(
     [ID]       INT             NOT NULL
    ,[Name]     VARCHAR(100)
    
    CONSTRAINT [PK_dupes] PRIMARY KEY
    ( [ID] )
);

INSERT INTO [#dupes]
     (  [ID],   [Name]  )
VALUES
     (  1,      'George' )
    ,(  2,      'Paul' )
    ,(  3,      'Paul' )
    ,(  4,      'John' )
    ,(  5,      'John' )
    ,(  6,      'John' )
    ,(  7,      'Ringo' )
    ,(  8,      'Ringo' )
    ,(  9,      'Ringo' )
    ,(  10,     'Ringo' );

/* Your Solution Below Here */

-- After creating and populating table, run entire selection below to produce result

DELETE D
FROM #dupes D
INNER JOIN (

		SELECT *, 
		RANK() OVER (PARTITION BY Name ORDER BY ID) rank
		FROM #dupes
		
		) DD ON  D.ID = DD.ID
WHERE rank >1;


SELECT * FROM #dupes




/*
    Exercise #2

    Request:
    
    Retrieve the make, model, and color attributes for EntrySet #1 and use them
    to build the string "I drive a Red Ferrari F40 to work every day!"

    Validation:
    The desired output is the string "I drive a Red Ferrari F40 to work every day!"
*/

--DROP TABLE #ParameterValues

CREATE TABLE [#ParameterValues]
(
     [EntrySet]         INT                 NOT NULL
    ,[Parameter]        VARCHAR(10)         NOT NULL
    ,[Value]            VARCHAR(100)        NOT NULL

    CONSTRAINT [PK_ParameterValues] PRIMARY KEY
        ( [EntrySet], [Parameter] )
);

INSERT INTO [#ParameterValues]
     (  [EntrySet], [Parameter],    [Value] )
VALUES
     (  1,          'MAKE',         'Ferrari' )
    ,(  1,          'MODEL',        'F40' )
    ,(  1,          'COLOR',        'Red' )
    ,(  2,          'MAKE',         'Dodge' )
    ,(  2,          'MODEL',        'Challenger' )
    ,(  2,          'COLOR',        'Blue' )
    ,(  3,          'MAKE',         'Porsche' )
    ,(  3,          'MODEL',        '911' );

/* Your Solution Below Here */



-- After creating and populating table, run entire selection below to produce result

DECLARE @myString varchar(100)
SET @myString = ''

SELECT @myString = @myString + Value + N' ' FROM #ParameterValues WHERE EntrySet = 1

PRINT 'I drive a ' + @myString + 'to work every day!'



--SELECT * FROM #parametervalues
/*
    Exercise #3

    Request:
    Split a comma delimited string into individual table records.

    The given string is only an example. The input string could be random
    and may contain any number of elements.

    Validation:
    The desired output for the given input string value is the result set below.

    SplitString
    ------------------------
    1
    2
    (random length string of A's)
    3
    45
    TEST

*/



/* Setup Exercise Data */

--DROP FUNCTION Split

DECLARE @String         VARCHAR(8000);

SET @String = '1,2,' + REPLICATE( 'A', FLOOR( RAND() * ( 10 - 1 ) + 1 ) ) + ',3,45,TEST';

/* Your Solution Below Here */


/* 1.  Run Once to create Function */

GO
CREATE FUNCTION dbo.Split (@sep char(1), @s varchar(8000))
RETURNS table
AS
RETURN (
    WITH splitter_cte AS (
      SELECT CHARINDEX(@sep, @s) as pos, 0 as lastPos
      UNION ALL
      SELECT CHARINDEX(@sep, @s, pos + 1), pos
      FROM splitter_cte
      WHERE pos > 0
    )
    SELECT SUBSTRING(@s, lastPos + 1,
                     case when pos = 0 then 80000
                     else pos - lastPos -1 end) as chunk
    FROM splitter_cte
  )
GO

/* 2.  Run Second to produce output. */

DECLARE @String         VARCHAR(8000);
SET @String = '1,2,' + REPLICATE( 'A', FLOOR( RAND() * ( 10 - 1 ) + 1 ) ) + ',3,45,TEST';
 
SELECT *
  FROM dbo.Split(',', @String)
OPTION(MAXRECURSION 0);




/*
    Exercise #4

    Request:
    Calculate the business hours duration between an employee's punch-in and punch-out times.
	
	Business hours are defined as Monday-Friday 08:00 AM - 05:00 PM
	
    Only include records where there is a matching punch-in and punch-out time for that employee.

    Validation:
    The desired output of "SELECT * FROM [#EmployeePunches]"  is the result set below.
	
	PunchID     EmpID       ClockIn                 ClockOut                ValidHours  ValidMinutes
	----------- ----------- ----------------------- ----------------------- ----------- -----------
	1           100         2015-10-06 09:40:00.000 2015-10-06 16:40:00.000 8           0
	2           100         2015-10-07 15:15:00.000 2015-10-09 13:15:00.000 18          0
	3           100         2015-10-10 07:35:00.000 2015-10-11 20:45:00.000 0           0
	4           100         2015-10-12 09:15:00.000 2015-10-12 17:45:00.000 6           45
	5           100         2010-10-28 13:45:00.000 2010-10-29 07:45:00.000 2           15
	
*/

--DROP TABLE #EmployeePunches


CREATE TABLE #EmployeePunches
(
	PunchID		INT IDENTITY(1,1)
	,EmpID		INT
	,ClockIn	DATETIME
	,ClockOut	DATETIME
)
INSERT INTO #EmployeePunches(EmpID, ClockIn, ClockOut) SELECT 100,'10/6/2015 8:40AM'   , '10/6/2015 4:40PM'
INSERT INTO #EmployeePunches(EmpID, ClockIn, ClockOut) SELECT 100,'10/7/2015 1:15PM'   , '10/9/2015 1:15 PM'
INSERT INTO #EmployeePunches(EmpID, ClockIn, ClockOut) SELECT 100,'10/10/2015 8:35AM'  , '10/11/2015 8:45PM'
INSERT INTO #EmployeePunches(EmpID, ClockIn, ClockOut) SELECT 100,'10/12/2015 10:15 AM', '10/12/2015 5:45 PM'
INSERT INTO #EmployeePunches(EmpID, ClockIn, ClockOut) SELECT 100,'10/28/2015 2:45 PM' , '10/29/2015 7:45 AM'

/* Your Solution Below Here */

-- After creating and populating table, run entire selection below to produce result

 
;WITH cte AS ( 
    SELECT PunchID, EmpID, ClockIn, ClockOut,  
        DATEADD(d, Number, ClockIn) AS CurrentDate, 
        DATENAME(WEEKDAY, DATEADD(d, Number, ClockIn)) AS WeekDay, 
        CASE WHEN  
            DATEADD(d, 0, DATEDIFF(d, 0, DATEADD(d, Number, ClockIn))) = DATEADD(d, 0, DATEDIFF(d, 0, ClockIn)) 
                THEN CASE  
                        WHEN DATEPART(hour, ClockIn) < 8 THEN CONVERT(VARCHAR(10), ClockIn, 101) + ' 08:00:00' 
                        WHEN DATEPART(hour, ClockIn) >= 17 THEN CONVERT(VARCHAR(10), ClockIn, 101) + ' 17:00:00' 
                        ELSE ClockIn 
                    END 
                ELSE CONVERT(VARCHAR(10), DATEADD(d, Number, ClockIn), 101) + ' 08:00:00' 
        END AS CalcClockIn, 
        CASE WHEN  
            DATEADD(d, 0, DATEDIFF(d, 0, DATEADD(d, Number, ClockIn))) = DATEADD(d, 0, DATEDIFF(d, 0, ClockOut)) 
                THEN CASE  
                        WHEN DATEPART(hour, ClockOut) >= 17 THEN CONVERT(VARCHAR(10), ClockOut, 101) + ' 17:00:00' 
                        WHEN DATEPART(hour, ClockOut) < 8 THEN CONVERT(VARCHAR(10), ClockOut, 101) + ' 08:00:00' 
                        ELSE ClockOut 
                    END 
                ELSE CONVERT(VARCHAR(10), DATEADD(d, Number, ClockIn), 101) + ' 17:00:00' 
        END AS CalcClockOut, 
                     
        Number 
    FROM #EmployeePunches 
    CROSS JOIN master..spt_values 
    WHERE type = 'P' 
    AND Number < DATEDIFF(d, ClockIn, ClockOut) + 1 
    AND DATENAME(WEEKDAY, DATEADD(d, Number, ClockIn)) NOT IN ('Saturday','Sunday') 
) 
, cte2 AS ( 
    SELECT PunchID, EmpID, ClockIn, ClockOut,  
        SUM(DATEDIFF(mi, CalcClockIn, CalcClockOut)) OVER (PARTITION BY PunchID) AS TotalMinutes, 
        ROW_NUMBER() OVER (PARTITION BY PunchID ORDER BY ClockIn) AS Seq
		
    FROM cte 
)  
SELECT  
	PunchID,
	EmpID,
    ClockIn, 
    ClockOut, 
    TotalMinutes / 60 AS ValidHours, 
    TotalMinutes % 60 AS ValidMinutes 
FROM cte2 
WHERE Seq = 1



